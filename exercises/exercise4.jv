pipeline MowestaPipeline {
    MowestaZipDownloader
        -> MowestaZipExtractor
        -> MowestaCsvSelector
        -> MowestaColumnRenamer
        -> MowestaTemperatureTransformer
        -> MowestaDataValidator
        -> MowestaDBLoader
        -> MowestaCleanup;

    block MowestaZipDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
        dest: "mowesta-dataset.zip";
    }

    block MowestaZipExtractor oftype ArchiveExtractor {
        source: "mowesta-dataset.zip";
        dest: "mowesta-dataset";
    }

    block MowestaCsvSelector oftype FilePicker {
        path: "/data.csv";
        source: "mowesta-dataset";
        dest: "selected-data.csv";
    }

    block MowestaColumnRenamer oftype TableColumnRenamer {
        source: "selected-data.csv";
        dest: "reshaped-data.csv";
        mappings: [
            { from: "Temperatur in °C (DWD)", to: "Temperatur" },
            { from: "Batterietemperatur in °C", to: "Batterietemperatur" },
        ];
    }

    block MowestaTemperatureTransformer oftype TableTransformer {
        source: "reshaped-data.csv";
        transformations: [
            { column: "Temperatur", transform: CelsiusToFahrenheit },
            { column: "Batterietemperatur", transform: CelsiusToFahrenheit },
        ];
    }

    block MowestaDataValidator oftype DataValidator {
        source: "transformed-data.csv";
        validations: [ GeraetPositiveInteger ];
    }

    block MowestaDBLoader oftype SQLiteLoader {
        source: "validated-data.csv";
        table: "temperatures";
        file: "./temperatures.sqlite";
        output: ["./temperatures.sqlite"];
    }


    block MowestaCleanup oftype FileRemover {
        files: ["mowesta-dataset.zip", "mowesta-dataset", "selected-data.csv", "reshaped-data.csv", "transformed-data.csv", "validated-data.csv"];
    }

    transform CelsiusToFahrenheit {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;
        fahrenheit: (celsius * 9/5) + 32;
    }

    validation GeraetPositiveInteger oftype PosIntegerType {
        column: "Geraet";
    }

    valuetype PosIntegerType oftype integer {
        constraints: [ PostRange ];
    }

    constraint PostRange oftype RangeConstraint {
        lowerBound: 1;
        lowerBoundInclusive: true;
    }
}
