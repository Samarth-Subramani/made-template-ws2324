pipeline TrainStopPipeline {
    // Extract, interpret, and load data
    CsvHttpExtractor
        -> CsvTextFileInterpreter
        -> CsvFileInterpreter
        -> StatusColumnDeleter
        -> TrainStopTableInterpreter
        -> TrainStopLoader;

    // HTTP extractor block to fetch the CSV file
    block CsvHttpExtractor oftype HttpExtractor {
        url: "https://download-data.deutschebahn.com/static/datasets/haltestellen/D_Bahnhof_2020_alle.CSV";
    }

    // Text file interpreter for HTTP response
    block CsvTextFileInterpreter oftype TextFileInterpreter { }

    // CSV interpreter to parse CSV content
    block CsvFileInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }
    
    // Delete the "Status" column
    block StatusColumnDeleter oftype ColumnDeleter {
        delete: [column J];
    }

    // Interpret CSV data and define table structure
    block TrainStopTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "EVA_NR" oftype integer,       
            "DS100" oftype TextType,
            "IFOPT" oftype TextType,
            "NAME" oftype TextType,
            "Verkehr" oftype TextType,
            "Laenge" oftype CordinateType,
            "Breite" oftype CordinateType,
            "Betreiber_Name" oftype TextType,
            "Betreiber_Nr" oftype integer,   
        ];
    }

    // Load interpreted data into SQLite database
    block TrainStopLoader oftype SQLiteLoader {
        table: "trainstops";
        file: "./trainstops.sqlite";
    }
    
    // Data type validations
    valuetype VerkehrType oftype text {
        constraints: [ValidVerkehrValues];
    }

    valuetype CordinateType oftype decimal {
        constraints: [ValidGeographicCordinates];
    }

    valuetype IfOptType oftype text {
        constraints: [ValidIfOptValues];
    }

    valuetype TextType oftype text {
        constraints: [NonEmptyValues];
    }

    // Constraints
    constraint ValidVerkehrValues oftype AllowlistConstraint {
        allowlist: ["FV", "RV", "nur DPN"];
    }

    constraint ValidGeographicCordinates oftype RangeConstraint {
        lowerBound: -90;
        upperBound: 90;
    }

    constraint ValidIfOptValues oftype RegexConstraint {
        regex: /^[a-zA-Z]{2}:\d+:\d+(?::\d+)?$/;
    }

    constraint NonEmptyValues oftype LengthConstraint {
        minLength: 1;
        maxLength: 9007199254740991;
    }
}
